#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 3 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

# Miscellaneous tasks which should run after the main packages have been
# installed and the configuration files symlinked.
install_bits_and_bobs () {
  # Set up a recent version of vim
  (
    # TODO(andrei): Ensure this is cross-platform.
    if which vim >/dev/null 2>&1 ; then
      echo "Detected vim."
      VIMVERSION=$(vim --version | head -1 | cut -d ' ' -f 5)

      if [[ 1 -eq $(echo "$VIMVERSION >= 8.0" | bc) ]]; then
        echo "vim version [$VIMVERSION] OK!"
        exit
      fi

      echo "Vim version [$VIMVERSION] insufficient. Installing from source."
    else
      echo "No vim detected. Installing from source."
    fi

    # sudo apt install checkinstall
    cd ~/work
    git clone https://github.com/vim/vim.git >/dev/null 2>&1
    mkdir -p ~/.local
    cd ~/work/vim
    git fetch
    git checkout v8.1.0041
    VIMDIR=~/.local
    ./configure --with-features=huge \
            --enable-multibyte \
            --enable-pythoninterp=yes \
            --enable-gui=gtk2 \
            --enable-cscope \
            --prefix=$VIMDIR >/dev/null || fail "Could not configure vim"
    make VIMRUNTIMEDIR=$VIMDIR/share/vim/vim80 -j24 >/dev/null || fail "Could not make vim"
    make install >/dev/null && ln -s ~/.local/bin/vim ~/bin/vim || fail "Could not install vim (locally)"
  ) || fail "Could not set up vim from source"

  # Ensure the rest of the script uses the right vim, if applicable.
  export PATH=~/bin:$PATH

  vimrc_src="${DOTFILES_ROOT}/vim/vimrc.symlink"
  vimrc_dst="$HOME/.$(basename "${vimrc_src%.*}")"
  if ! [[ -L ${vimrc_dst} ]]; then
    # If the file does exist and is a symlink, then we assume it's the right one.
    echo
    info "Putting just the vimrc into place..."
    link_file "$vimrc_src" "$vimrc_dst"
  fi

  echo
  info "Installing Vundle..."
  if [[ -d ~/.vim/bundle/Vundle.vim ]]; then
    echo
    info "Cleaning up old Vundle..."
    rm -rf ~/.vim/bundle/Vundle.vim
  fi
  git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

  echo
  info "Installing vim plugins..."
  vim +PluginInstall +qall

  echo
  info "Installing native components for vim plugins who need them..."
  echo
  info "Installing YouCompleteMe for vim..."
  (
    # TODO(andrei): Cross-platform installation of prerequisites, e.g.,
    #   sudo apt-get install python-dev python3-dev cmake
    if [[ -f ~/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so ]]; then
      echo
      info "YCM seems to have already been setup.  Skipping recompile."
    else
      cd ~/.vim/bundle/YouCompleteMe
      ./install.py --clang-completer
    fi
  ) || fail "Could not set up YouCompleteMe for vim."

  # Note: this should be run before symlinking the dotfiles into place, since
  # it replaces the current zshrc, and there's no way to stop it.
  echo
  info "Installing oh-my-zsh..."
  (
    cd ~
    if [ ! -n "$ZSH" ]; then
      ZSH=~/.oh-my-zsh
    fi

    # Only do work if the folder isn't there.
    if ! [[ -d "$ZSH" ]]; then
      umask g-w,o-w
      env git clone --depth=1 https://github.com/robbyrussell/oh-my-zsh.git $ZSH || {
        fail "Error: git clone of oh-my-zsh repo failed\n"
    }
    fi

  ) || fail "Could not set up oh-my-zsh."

  if which ag >/dev/null 2>&1; then
    info "ag already installed"
  else
    info "Installing ag, the silver searcher."
    (
      # Install 'liblzma' for the local user.

      # TODO(andrei): Consider installing these in some local folder for future
      # inspection, reinstalling, etc.

      cd "$(mktemp -d)" && \
      git clone https://github.com/kobolabs/liblzma >/dev/null && \
      cd liblzma && \
      ./configure --prefix="${HOME}" >/dev/null && make -j >/dev/null && \
      make install >/dev/null || {
        fail "Could not set up liblzma."
      }

      # Install 'the_silver_searcher' itself.
      cd "$(mktemp -d)" && \
      git clone https://github.com/ggreer/the_silver_searcher >/dev/null && \
      cd the_silver_searcher && \
      PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:${HOME}/lib/pkgconfig" ./build.sh --prefix="${HOME}" >/dev/null && \
      make install >/dev/null
    ) || fail "Could not set up ag."
  fi

  # info "Installing thefuck via pip..."
  # (
    # if which pip3 >/dev/null 2>&1; then
      # pip3 install --user thefuck --upgrade >/dev/null
    # fi
  # ) || fail "Could not set up thefuck"

  info "Installing patched powerline fonts..."
  (
    cd /tmp
    if [[ -d "fonts" ]]; then
      rm -rf "fonts"
    fi
    git clone https://github.com/powerline/fonts
    cd fonts
    ./install.sh
  )

  if ! [[ -d "$HOME/.tmux" && -d "$HOME/.tmux/plugins" && -d "$HOME/.tmux/plugins/tpm" ]]; then
    info "No Tmux Plugin Manager. Installing..."
    (
      git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
      success "Installed tpm for tmux."
    ) || fail "Could not set up tmux tpm."
  fi

  success "Installed all bits and bobs."
}

# Suport locally installing things.
mkdir -p "${HOME}/bin"
mkdir -p "${HOME}/lib"
mkdir -p "${HOME}/man"
mkdir -p "${HOME}/include"

setup_gitconfig

# If we're on a Mac, let's install and setup homebrew together with a bunch
# of commong useful packages. This is done *before* the bits and bobs, since we
# may need some of these tools (e.g., cmake) for installing bits and bobs.
if [ "$(uname -s)" == "Darwin" ]; then
  info "installing dependencies"
  if source bin/dot | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
else
  # Naively assume Ubuntu/Debian and install some misc. stuff.

  # TODO(andrei): 'replicate' program in 'dotfiles/bin' which sets up my
  # dotfiles on a given host. Tip: it could even be used to augment my
  # .ssh/config file and create a proper ssh-to symlink.

  # TODO(andrei): Extract this into common helper.
  CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
  if [ ${CAN_I_RUN_SUDO} -gt 0 ]; then
    sudo apt install -y build-essential cowsay sl scons npm \
      curl htop autoconf autotools-dev python-dev python3-dev libpcre3 \
      libpcre3-dev lzma lzma-dev
  fi
fi

info "Installing bits and bobs BEFORE symlinking configs, since some of " \
  "these bits and bobs may try to overwrite config files."
install_bits_and_bobs

install_dotfiles

echo ''
echo '  All installed!'
