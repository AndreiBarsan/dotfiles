#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

# Miscellaneous tasks which should run after the main packages have been
# installed and the configuration files symlinked.
install_bits_and_bobs () {

  echo
  info "Putting just the vimrc into place..."
  vimrc_src="$DOTFILES_ROOT/vim/vimrc.symlink"
  dst="$HOME/.$(basename "${src%.*}")"
  link_file "$src" "$dst"

  echo
  info "Installing Vundle..."
  if [[ -d ~/.vim/bundle/Vundle.vim ]]; then
    echo
    info "Cleaning up old Vundle..."
    rm -rf ~/.vim/bundle/Vundle.vim
  fi
  git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

  echo
  info "Installing vim plugins..."
  vim +PluginInstall +qall

  echo
  info "Installing native components for vim plugins who need them..."
  echo
  info "Installing YouCompleteMe for vim..."
  (
    if [[ -f ~/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so ]]; then
      echo
      info "YCM seems to have already been setup.  Skipping recompile."
    else
      cd ~/.vim/bundle/YouCompleteMe
      ./install.sh --clang-completer
    fi
  ) || fail "Could not set up YouCompleteMe for vim."

  #echo
  #info "Installing Tern for vim..."
  #(
    #cd ~/.vim/bundle/tern_for_vim
    #npm install
  #) # || fail "Could not set up Tern for vim."
  #if ! [[ $? -eq 0 ]]; then
    #echo "Could not set up Tern for vim; skipping."
  #fi

  # Note: this should be run before symlinking the dotfiles into place, since
  # it replaces the current zshrc, and there's no way to stop it.
  echo
  info "Installing oh-my-zsh..."
  (
    cd ~
    if [ ! -n "$ZSH" ]; then
      ZSH=~/.oh-my-zsh
    fi
    umask g-w,o-w
    env git clone --depth=1 https://github.com/robbyrussell/oh-my-zsh.git $ZSH || {
      fail "Error: git clone of oh-my-zsh repo failed\n"
    }

  ) # || fail "Could not set up oh-my-zsh."

  echo
  info "Installing ag, the silver searcher."
  (
    # Install 'liblzma' for the local user.
    cd "/tmp"
    git clone https://github.com/kobolabs/liblzma
    cd liblzma
    ./configure --prefix="${HOME}" && make -j && make install

    # Install 'the_silver_searcher' itself.
    cd "/tmp"
    git clone https://github.com/ggreer/the_silver_searcher
    cd the_silver_searcher
    PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:${HOME}/lib/pkgconfig" ./build.sh --prefix="${HOME}" && \
    make install
  ) || fail "Could not set up ag."

  echo
  info "Installing thefuck via pip..."
  (
    if which pip >/dev/null 2>&1; then
      pip install --user thefuck --upgrade
    fi
  )

  success "Installed all bits and bobs."
}

# Suport locally installing things.
mkdir -p "${HOME}/bin"
mkdir -p "${HOME}/lib"
mkdir -p "${HOME}/man"
mkdir -p "${HOME}/include"

setup_gitconfig

info "Installing bits and bobs BEFORE symlinking configs, since some of " \
  "these bits and bobs may try to overwrite config files."
install_bits_and_bobs

install_dotfiles

# If we're on a Mac, let's install and setup homebrew together with a bunch
# of commong useful packages.
if [ "$(uname -s)" == "Darwin" ]; then
  info "installing dependencies"
  if source bin/dot; then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
else
  # Naively assume Ubuntu/Debian and install some misc. stuff.

  # TODO(andrei): Local install of tiny helpers, such as ag. Find out if
  # there's an easy way of doing it, so you don't have to manually write
  # scripts for everything.
  # TODO(andrei): 'replicate' program in 'dotfiles/bin' which sets up my
  # dotfiles on a given host. Tip: it could even be used to augment my
  # .ssh/config file and create a proper ssh-to symlink.

  # TODO(andrei): Extract this into common helper.
  CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
  if [ ${CAN_I_RUN_SUDO} -gt 0 ]; then
    sudo apt-get install -y spark npm cowsay sl scons silversearcher-ag npm \
      curl htop
  fi
fi

echo ''
echo '  All installed!'
