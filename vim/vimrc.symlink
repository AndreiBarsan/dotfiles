" Andrei Barsan's .vimrc of incredible awesomeness.
"
" This file contains configuration parameters for a number of technologies
" including Python, JavaScript (browser, Node, Meteor), C++ and Scala.  Feel
" free to comment out whatever plugins you don't need.
"
" Inspired by many, many other `.vimrc's out there.  Notable ones include:
"   - Coming Home to Vim
"   (http://stevelosh.com/blog/2010/09/coming-home-to-vim/)
"   - Mark Lodato's (my former Google manager) .vimrc
"   (https://github.com/MarkLodato/dotfiles)
"
" Note: might contain a number of OSX-specific stuff.  YMMV.
" Note: some plugins (e.g. Syntastic and YouCompleteMe) require additional
" compiled components and programs to be installed.  Please read their
" respective docs for more info (usually available on GitHub one Google (or,
" better yet, StartPage) search away).

" TODO(andrei): learn more about sparkup
" TODO(andrei): learn more about tabular
" TODO(andrei): learn more about nerdcommenter
" TODO(andrei): learn about organizing projects in vim
" TODO(andrei): preserve each tab's current dir

set nocompatible              " be iMproved, required
filetype off                  " required for setting up the plugins
set encoding=utf-8

" The default OSX leader is `\', which is a bit annoying.
let mapleader = ','
" Don't time out waiting for leader commands.
set notimeout
set ttimeout

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Hint: keep this in alphabetical order!  To sort it, select the whole list,
" then use `!sort -f' to sort it (`-f' means case-insensitive).
Plugin 'bling/vim-airline'          " Pretty status line
Plugin 'flazz/vim-colorschemes'     " Moar color schemes
Plugin 'godlygeek/tabular'          " Format stuff in columns
Plugin 'gregsexton/MatchTag'        " HTML tag matching
Plugin 'kien/ctrlp.vim'             " Global fuzzy search
Plugin 'klen/python-mode'           " Python navigation & other goodies
Plugin 'L9'                         " Lots of small helpers
Plugin 'luochen1990/rainbow'        " Easily identify nested statements
Plugin 'marijnh/tern_for_vim'       " Smart JavaScript auto-complete
Plugin 'pangloss/vim-javascript'    " JavaScript utilities
Plugin 'plasticboy/vim-markdown'    " Markdown support, yep
Plugin 'Raimondi/delimitMate'       " Auto-complete quotes, parens, etc.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}  " Super-speedy HTML typing
Plugin 'scrooloose/nerdcommenter'   " Smart en-masse commenter
Plugin 'scrooloose/nerdtree'        " File browser
Plugin 'scrooloose/syntastic'       " Lint-o-Matic
Plugin 'skwp/greplace.vim'          " Global replace tools
Plugin 'tpope/vim-fugitive'         " git helper
Plugin 'Valloric/YouCompleteMe'     " Awesome autocomplete
Plugin 'vim-scripts/a.vim'          " *.c(c|pp)?-*h switcher
Plugin 'rosenfeld/conque-term'      " Terminal emulation inside vim
Plugin 'sheerun/vim-polyglot'       " Smart support for tons of languages
Plugin 'tinymode.vim'               " Easy on-the-fly window resizing

call vundle#end()             " required
filetype plugin indent on     " required

set autoindent
set smartindent
set syntax=on
set number
set hidden                    " Allow buffers in the background
set noswapfile                " Shoo, shoo, swap files!
set textwidth=79              " Use gq in visual mode to enforce it!

colorscheme Chasing_Logic
set background=dark

" Use soft tabs
autocmd Filetype * set tabstop=2|set shiftwidth=2|set expandtab
autocmd Filetype python set tabstop=4|set shiftwidth=4|set expandtab

set visualbell

" Use sensible regex parsing when searching
nnoremap / /\v
vnoremap / /\v

" Make all replacement operations global by default
set gdefault

" Use leader-space to clear the last search
nnoremap <leader><space> :noh<cr>

" Use <tab> instead of `%' to jump between brackets.  What am I, a robit?
nnoremap <tab> %
vnoremap <tab> %

" Make auto-format (`=') a bit better
set formatoptions=qrn1

" Make j/k work with visual lines, instead of file lines
nnoremap j gj
nnoremap k gk

" Shoo, shoo, pesky F1!
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap ; :
vnoremap ; :
nnoremap : ;
vnoremap : ;

set colorcolumn=80
set hlsearch
set incsearch
set showmatch
set ignorecase      " Ignore case when searching...
set smartcase       " ...unless we type a capital

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

function ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function TrimSpaces() range
  let oldhlsearch=ShowSpaces(1)
  execute a:firstline.",".a:lastline."substitute ///gec"
  let &hlsearch=oldhlsearch
endfunction

" Trailing space cleanup mappings
nnoremap <leader>W :TrimSpaces<CR>

command -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
nnoremap <F10> :ShowSpaces 1<CR>
nnoremap <S-F10> m`:TrimSpaces<CR>``
vnoremap <S-F10> :TrimSpaces<CR>

" Use CMD-1 to CMD-9 to access tabs.
map <silent> <D-1> :tabn 1<cr>
map <silent> <D-2> :tabn 2<cr>
map <silent> <D-3> :tabn 3<cr>
map <silent> <D-4> :tabn 4<cr>
map <silent> <D-5> :tabn 5<cr>
map <silent> <D-6> :tabn 6<cr>
map <silent> <D-7> :tabn 7<cr>
map <silent> <D-8> :tabn 8<cr>
map <silent> <D-9> :tabn 9<cr>

" Directly jump between windows using C-lkjh
nnoremap <silent> <C-l> <C-w>l
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k

" OSX terminal-like tab navigation
nnoremap <silent> <D-S-Left> :tabp<cr>
nnoremap <silent> <D-S-Right> :tabn<cr>

if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" If you visually select something and hit paste that thing gets yanked into
" your buffer. This generally is annoying when you're copying one item and
" repeatedly pasting it. This changes the paste command in visual mode so that
" it doesn't overwrite whatever is in your paste buffer.
" vnoremap p "_dP

" Quickly open `.vimrc'
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" Sane clipboard behavior in MacVim
set clipboard=unnamed

" Ctrl/Cmd-A to select all.
nnoremap <C-a> ggVG
nnoremap <D-a> ggVG

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" Don't use Ex mode, use Q for formatting.  What is this, 1976?
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

"
" Plugin Configuration
"
let g:vim_markdown_folding_disabled=1

" Automatically open NERDTree when launching vim
autocmd vimenter * NERDTree
" Automatically quit if the only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

let b:javascript_fold=0
let g:tern_map_keys=1

" YouCompleteMe parameters
nnoremap <C-[> YcmCompleter GoTo
let g:ym_collect_identifiers_from_comments_and_strings=1
let g:ycm_complete_in_comments=1

" syntastic stuff
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
" Disable default checks in Python, because they are slow
let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': [],'passive_filetypes': ['python'] }

" disable pymode's folding, for now
let g:pymode_folding = 0
" We have syntastic for linting.
let g:pymode_lint = 0

" Rainbow parentheses for better readability of nested expressions.
let g:rainbow_active = 1

" Show buffer list
let g:airline#extensions#tabline#enabled = 1
" Use fany symbols (needs patched font)
let g:airline_powerline_fonts=1

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
