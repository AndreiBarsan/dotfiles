" Andrei Barsan's .vimrc of incredible awesomeness.
"
" This file contains configuration parameters for a number of technologies
" including Python, JavaScript (browser, Node, Meteor), C++ and Scala.  Feel
" free to comment out whatever plugins you don't need.
"
" Inspired by many, many other `.vimrc's out there.  Notable ones include:
"   - Coming Home to Vim
"   (http://stevelosh.com/blog/2010/09/coming-home-to-vim/)
"   - Mark Lodato's (my former Google manager) .vimrc
"   (https://github.com/MarkLodato/dotfiles)
"
" Note: might contain a number of OSX-specific stuff.  YMMV.
" Note: some plugins (e.g. Syntastic and YouCompleteMe) require additional
" compiled components and programs to be installed.  Please read their
" respective docs for more info (usually available one GitHub, Google or,
" better yet, StartPage search away).
" Note: not a customization, but ZZ saves and closes the current tab.

" TODO(andrei): learn more about sparkup
" TODO(andrei): learn more about tabular
" TODO(andrei): learn more about nerdcommenter
" TODO(andrei): Stuff flagged [OSX] or [MacVim] belong in a separate file.
" TODO(andrei): Configure C-k better.
"
" Current spare slots for mapping things:
"  * <space>: doesn't do anything interesting in normal mode (Experimentally
"    using it to trigger Ctrl-P fuzzy search at the moment)
"  * <enter>: ditto
"  * <K>:     tries to open the manual; not too useful
"  * <leader>qwerty...
"  * <C-q>, <C-w>

set nocompatible              " be iMproved, required
filetype off                  " required for setting up the plugins
set encoding=utf-8

" The default leader is `\', which is a bit annoying.
" The *local* leader, which is typically used for commands which only pertain
" to certain file types, such as TeX, is '\'.
let mapleader = ','
" Don't time out waiting for leader commands.
set notimeout
set ttimeout

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Hint: keep this in alphabetical order!  To sort it, select the whole list,
" then use `!sort -f' to sort it (`-f' means case-insensitive).
Plugin 'benmills/vimux'             " Pretty interactions with tmux.
Plugin 'flazz/vim-colorschemes'     " Moar color schemes
Plugin 'godlygeek/tabular'          " Format stuff in columns
Plugin 'gregsexton/MatchTag'        " HTML tag matching
" Plugin 'jceb/vim-orgmode'           " org-mode in Vim. SpaceMacs is still better, yo!
Plugin 'honza/vim-snippets'         " Snippets for UltiSnips
Plugin 'kien/ctrlp.vim'             " Global fuzzy search
" Plugin 'L9'                         " Lots of small helpers
Plugin 'lervag/vimtex'              " Edit LaTeX in Vim
Plugin 'luochen1990/rainbow'        " Easily identify nested statements
Plugin 'plasticboy/vim-markdown'    " Markdown support, yep
" Plugin 'Raimondi/delimitMate'       " Auto-complete quotes, parens, etc.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}  " Super-speedy HTML typing
Plugin 'scrooloose/nerdcommenter'   " Smart en-masse commenter
Plugin 'scrooloose/nerdtree'        " File browser
" Plugin 'scrooloose/syntastic'       " Lint-o-Matic
" Plugin 'sheerun/vim-polyglot'       " Smart support for tons of languages
Plugin 'SirVer/ultisnips'           " Code snippet management
Plugin 'sjl/gundo.vim'              " Navigate undo tree visually
" Plugin 'skwp/greplace.vim'          " Global replace tools
Plugin 'tpope/vim-surround'         " Nice surrounding semantics.
Plugin 'vim-airline/vim-airline'    " Pretty status line
Plugin 'vim-scripts/a.vim'          " *.c(c|pp)?-*h switcher
" Plugin 'johngrib/vim-game-code-break'
 Plugin 'tmux-plugins/vim-tmux'      " Play nice with tmux
 Plugin 'tmux-plugins/vim-tmux-focus-events'


if (v:version > 703 && has('patch143')) || v:version >= 800
  " Awesome autocomplete, but requires a very specific minimum vim version.
  " Disabled at times when I'm not doing a lot of dev in vim.
  " Plugin 'Valloric/YouCompleteMe'
endif

" Plugin purgatory
" This makes startup VERY slow, so I'm keeping it disabled for no, so I'm
" keeping it disabled for now
"Plugin 'cjrh/vim-conda'             " Detect the correct Python when using Anaconda
"Plugin 'burnettk/vim-angular'       " AngularJS magic
"Plugin 'klen/python-mode'           " Python navigation & other goodies
"Plugin 'tinymode.vim'               " Easy on-the-fly window resizing
"Plugin 'tpope/vim-fugitive'         " git helper
"Plugin 'marijnh/tern_for_vim'       " Smart JavaScript auto-complete
"Plugin 'othree/javascript-libraries-syntax.vim' " Autocomplete library identifiers
"Plugin 'pangloss/vim-javascript'    " JavaScript utilities

call vundle#end()             " required
filetype plugin indent on     " required

set autoindent
set smartindent
syntax on                     " The correct way to enable syntax highlighting.
                              " set syntax=foo is actually used to specify the
                              " language (e.g. set syntax=perl).
set number
set hidden                    " Allow buffers in the background
set noswapfile                " Shoo, shoo, swap files!
set textwidth=79              " Use gq in visual mode to enforce it!
set cursorline                " Highlight the current line
set colorcolumn=80
set hlsearch
set incsearch
set showmatch
set ignorecase                " Ignore case when searching...
set smartcase                 " ...unless we type a capital
set history=10000             " Huge vim command history
set mouse=a

colorscheme xemacs
set background=dark

" Use soft tabs of length two
autocmd Filetype * set tabstop=2|set shiftwidth=2|set expandtab
autocmd Filetype python set tabstop=4|set shiftwidth=4|set expandtab
" ...unless we're in a Makefile.
autocmd Filetype make set tabstop=4|set shiftwidth=4|set noexpandtab

" Allow longer text lines for Scala
autocmd FileType scala set textwidth=119
autocmd FileType scala set colorcolumn=120
" ...and C++ since modern C++ is pretty verbose.
autocmd FileType cpp set textwidth=99
autocmd Filetype cpp set colorcolumn=100

set visualbell

" Use sensible regex parsing when searching
nnoremap / /\v
vnoremap / /\v

" Make all replacement operations global by default
set gdefault

" Use leader-space to clear the last search
nnoremap <leader><space> :noh<cr>

" Use <tab> instead of `%' to jump between brackets.  What am I, a robit?
nnoremap <tab> %
vnoremap <tab> %

" Make auto-format (`=') a bit better
set formatoptions=qrn1
" Force automatic text wrapping.
set formatoptions+=t

" Make j/k work with visual lines, instead of file lines
nnoremap j gj
nnoremap k gk

" Shoo, shoo, pesky F1!
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" In normal and visual mode, you type the colon much more often than the
" semicolon.  Let's save some keystrokes!
nnoremap ; :
vnoremap ; :
nnoremap : ;
vnoremap : ;

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

function ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function TrimSpaces() range
  let oldhlsearch=ShowSpaces(1)
  execute a:firstline.",".a:lastline."substitute ///gec"
  let &hlsearch=oldhlsearch
endfunction

" Trailing space cleanup mappings
nnoremap <leader>W :TrimSpaces<CR>

command -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
nnoremap <F10> :ShowSpaces 1<CR>
nnoremap <S-F10> m`:TrimSpaces<CR>``
vnoremap <S-F10> :TrimSpaces<CR>

" [OSX] [MacVim] Use CMD-1 to CMD-9 to access tabs.
map <silent> <D-1> :tabn 1<cr>
map <silent> <D-2> :tabn 2<cr>
map <silent> <D-3> :tabn 3<cr>
map <silent> <D-4> :tabn 4<cr>
map <silent> <D-5> :tabn 5<cr>
map <silent> <D-6> :tabn 6<cr>
map <silent> <D-7> :tabn 7<cr>
map <silent> <D-8> :tabn 8<cr>
map <silent> <D-9> :tabn 9<cr>

" Directly jump between windows using C-hjkl
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-l> <C-w>l

" TODO(andrei): Plugin for easy pane resizing in vim.

" Leader+z/x to navigate through buffers
nnoremap <silent> <leader>z :bp<cr>
nnoremap <silent> <leader>x :bn<cr>
nnoremap <silent> %         :bn<cr>

" Create window splits easier.
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" [OSX] [MacVim] terminal-like tab navigation
nnoremap <silent> <D-S-Left> :tabp<cr>
nnoremap <silent> <D-S-Right> :tabn<cr>

if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

set scrolloff=8         " Start scrolling when we're 8 lines away from margins
set sidescroll=1        " Do the same thing for sideways scrolling
set sidescrolloff=15

" If you visually select something and hit paste that thing gets yanked into
" your buffer. This generally is annoying when you're copying one item and
" repeatedly pasting it. This changes the paste command in visual mode so that
" it doesn't overwrite whatever is in your paste buffer. Same for using 'x' to
" delete single characters.
vnoremap p "_dP
nnoremap x "_x

" Quickly open `.vimrc'
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" [OSX] [MacVim] Sane clipboard behavior in MacVim.
set clipboard=unnamed

" Ctrl/Cmd-A to select all (only Ctrl-A works inside regular Vim).
nnoremap <C-a> ggVG
nnoremap <D-a> ggVG

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" Don't use Ex mode, use Q for formatting.  What is this, 1976?
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" w!! to write a file as sudo
" stolen from Steve Losh
cmap w!! w !sudo tee % >/dev/null

" Make 0 go to the first character rather than the beginning of the line. When
" we're programming, we're almost always interested in working with text rather
" than empty space. If you want the traditional beginning of line, use ^.
nnoremap 0 ^
nnoremap ^ 0

" Note: these mappings rely on 'vim-surround'.
" ," Surround a word with "quotes"
map ," ysiw"
vmap ," c"<C-R>""<ESC>

" ,' Surround a word with 'single quotes'
map ,' ysiw'
vmap ,' c'<C-R>"'<ESC>

" ,) or ,( Surround a word with (parens)
" The difference is in whether a space is put in
map ,( ysiw(
map ,) ysiw)
vmap ,( c( <C-R>" )<ESC>
vmap ,) c(<C-R>")<ESC>

" ,[ Surround a word with [brackets]
map ,] ysiw]
map ,[ ysiw[
vmap ,[ c[ <C-R>" ]<ESC>
vmap ,] c[<C-R>"]<ESC>

" ,{ Surround a word with {braces}
map ,} ysiw}
map ,{ ysiw{
vmap ,} c{ <C-R>" }<ESC>
vmap ,{ c{ <C-R>" }<ESC>

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
    \ | wincmd p | diffthis
endif

" Resize windows with arrow keys using <leader>hjkl.
nnoremap <leader>k 5<C-w>-
nnoremap <leader>j 5<C-w>+
nnoremap <leader>h 5<C-w><
nnoremap <leader>l 5<C-w>>

" Correctly highlight C and C++ code in Bison grammar files.
autocmd BufRead,BufNewFile *.ypp set filetype=yacc

" Make the active vim window more obvious.
augroup BgHighlight
    " TODO(andrei): Remember the old column limit.
    autocmd!
    autocmd WinEnter * set cul   | set colorcolumn=80
    autocmd WinLeave * set nocul | set colorcolumn=0
augroup END


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:vim_markdown_folding_disabled=1

" autocmd vimenter * call OpenTree()
" Automatically quit if the only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
map <leader>r :NERDTreeFind<cr>

" Toggle NERDTree using Ctrl-N.
nnoremap <C-N> :NERDTreeToggle<CR>

" Open current file in NERDTree.
nnoremap - :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.pyc$']

let b:javascript_fold=0
let g:tern_map_keys=1

" NerdCommenter
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
" This actually means <C-/>. And doesn't work in gvim... 
nmap <C-_> <plug>NERDCommenterInvert<cr>
vmap <C-_> <plug>NERDCommenterInvert<cr>

" YouCompleteMe parameters (if applicable).
if v:version > 703 && has('patch143')
  " Note: This may produce garbage output in vim (not mvim).
  " Note: You can use the jumplist (C-O, C-I) to navigate this chain as well.
  nnoremap <C-[> :YcmCompleter GoTo<cr>
  nnoremap <C-]> :YcmCompleter GetDoc<cr>
  " For some reason, vim started interpreting escape presses while already in
  " normal mode as :YcmCompleter GoTo, which was a bit annoying.
  nnoremap <Esc> <Nop>

  " TODO(andrei): Add more mappings. Examples:
  "  * GoToDeclaration
  "  * GoToDefinition
  "  * GoToReferences <- useful! Find where the current symbol is referenced in
  "    the project. Populates quickfix list.

  let g:ym_collect_identifiers_from_comments_and_strings=1
  let g:ycm_complete_in_comments=1
  " Ensure we bypass e.g., Anaconda for running this plugin..
  "let g:ycm_path_to_python_interpreter = '/usr/bin/python3'
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
" Disable automatic checks in Python, because they are very slow
"let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': [],'passive_filetypes': ['python'] }

" disable pymode's folding, for now
"let g:pymode_folding = 0
" We have syntastic for linting (but pymode might be better).
"let g:pymode_lint = 0
"let g:pymode_lint_on_write = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" rainbow
" Rainbow parentheses for better readability of nested expressions.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:rainbow_active = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-airline
" Like powerline but lighter, and with fewer dependencies.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Show buffer list when only one tab is open.
let g:airline#extensions#tabline#enabled = 1
" Use fancy symbols (needs patched font)
let g:airline_powerline_fonts=1
" Ensure it's on from the start.
set laststatus=2


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP: Fuzzy search when you ctrl+P.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_custom_ignore = 'node_modules\|git\|DS_Store'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
" Experimental: tap space to search!
nnoremap <space> :CtrlP<CR>

" javascript-libraries-syntax
let g:used_javascript_libs = 'jquery,angularjs,jasmine'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimtex                                                                      "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vimtex_enabled = 1
let g:vimtext_mappings_enabled = 1
let g:vimtex_latexmk_options = '-xelatex -pdf'
let g:vimtex_latexmk_continuous = 1

" Manually set a few Vimtex commands which would otherwise be annoying to run
" using the local leader.
nnoremap <leader>c :VimtexCompile<CR>
nnoremap <leader>v :VimtexView<CR><space><CR>

if has('macunix')
  " Use Skim on OSX because it's stable and feature-rich, and Zathura doesn't
  " work properly for some reason.
  let g:vimtex_view_method='skim'
else
  " No need for custom stuff, since Zathura support is baked into vimtex.
  " Why Zathura? Because it's minimalistic and uses vim controls.
  let g:vimtex_view_method='zathura'
endif

" Ubuntu Linux Config
" No need for custom stuff, since Zathura support is baked into vimtex.
" Why Zathura? Because it's minimalistic and uses vim controls.
"let g:vimtex_view_method='zathura'
let g:vimtex_view_method='skim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimux                                                                       "
" Run arbitrary commands in a separate tmux pane, on the fly. Woo!            "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
noremap <leader>p :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
" Disabled since it conflicted with the vimtex mappings.
"noremap <Leader>l :VimuxRunLastCommand<CR>
" Inspect runner pane: jump to it directly in tmux copy mode.
noremap <Leader>vi :VimuxInspectRunner<CR>

" vim-conda
"let g:conda_startup_msg_suppress = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips                                                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
