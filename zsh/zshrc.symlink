# TODO(andrei): For maximum versatility, move non-zsh stuff to a .bashrc and
# source that from here.
# 
# Handy for macOS sessions: ï£¿

# This file defines the 'module' command support on Euryale. This is a very
# brittle way of doing things, but it seems to be the only reliable way.
# if [[ -f '/etc/profile.d/11-modules.sh' ]]; then
  # source /etc/profile.d/11-modules.sh >/dev/null 2>&1
# fi

# [ETH] Module support on Ubuntu 14.04 LTS.
# if [ -f /etc/profile.d/modules.sh ]; then
  # source /etc/profile.d/modules.sh
# fi

# [UofT] Set a sensible $PATH for CSLab.
if [ -z "$LEVEL" ] ; then
	export LEVEL=1
	export PATH=$HOME/bin:/local/bin:$HOME/local/bin:$PATH
	umask 077
fi

# Continuously refresh compinit, so we can instantly autocomplete the names of
# freshly installed packages.
zstyle ':completion:*' rehash true

# The project folder so that we can `c [tab]` to it.
export PROJECTS=~/work

# tmux already nicely handles window titles.
DISABLE_AUTO_TITLE="true"

# Shortcut to this dotfile's path is $ZSH.
# TODO(andrei): Is this really necessary? Isn't it just cleaner to keep
# your actual dotfile repo in 'work/dotfiles'?
if [[ -d "${HOME}/.dotfiles" ]]; then
  # I'm inconsistent on many of my machines. Plz no judge.
  export ZSH="${HOME}/.dotfiles"
else
  export ZSH="${PROJECTS}/dotfiles"
fi

# Stash local environment variables in ~/.localrc. This means they'll stay out
# of the main dotfiles repository (which is public).
if [[ -a ~/.localrc ]]; then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}; do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# Support bash-style autocompletion, not just zsh-style
autoload bashcompinit
bashcompinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}; do
  source $file
done

unset config_files

# Setup oh-my-zsh
export ZSH="$HOME/.oh-my-zsh"
plugins=(git osx zsh-syntax-highlighting conda)
ZSH_THEME="gnzh"
source "$ZSH/oh-my-zsh.sh"

# Only disconnect if we triple C-d.
export IGNOREEOF=2

# Tweak: make sure to treat dots and slashes as word delimiters
WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
bindkey -e

# Tweak: properly handle ctrl-left and ctrl-right (depends on your terminal settings)
#bindkey '^[[1;5C' forward-word
#bindkey '^[[1;5D' backward-word

# Proper character encoding
export LC_CTYPE=en_US.UTF-8

# Additional config parameters
if [[ -e ~/.local.bash ]]; then
  source ~/.local.bash
fi

# Job-specific stuff that shouldn't be subject to source control.
# if [[ -e ~/.zshrc.job ]]; then
  # source ~/.zshrc.job
# fi

# [OSX] iTerm2 integration (e.g. automatic theme switching depending on ssh
# host and other magic stuff).
test -e ${HOME}/.iterm2_shell_integration.zsh && source ${HOME}/.iterm2_shell_integration.zsh

# Python Anaconda support. Removing this can fix MANY weird build errors for
# seemingly unrelated projects!
#export PATH=/usr/local/anaconda3/bin:"$PATH"

# [Euler] Support modules (e.g. to do matlab command line interop)
#source /usr/local/opt/modules/Modules/init/zsh

# [OSX] Launch Matlab from the command line.
# export PATH="$PATH:/Applications/MATLAB_R2015a.app/bin"

# Add support for locally-installed stuff, such as Bazel.
export PATH="$PATH:$HOME/bin"
export LD_LIBRARY_PATH="$HOME/lib:$LD_LIBRARY_PATH"

# [OSX] Allow Jupyter to easily find matlab.
# export MATLAB_EXECUTABLE=/Applications/MATLAB_R2015a.app/bin/matlab

# The next line updates PATH for the Google Cloud SDK.
# if [ -f ~/workspace/google-cloud-sdk/path.zsh.inc ]; then
  # source ~/workspace/google-cloud-sdk/path.zsh.inc
# fi

# The next line enables shell command completion for gcloud on OSX.
# if [ -f /Users/andrei/workspace/google-cloud-sdk/completion.zsh.inc ]; then
  # source '/Users/andrei/workspace/google-cloud-sdk/completion.zsh.inc'
# fi

# Support for autojump, i.e., the `j` command, which acts as a smart `cd` which
# keeps track of your most active directories.
# TODO(andrei): Make this cross-platform.
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

# Autocomplete wolf commands
if $(command -v wolf >/dev/null 2>&1); then
  source <(wolf --bash-completion-script $(which wolf))
fi

# Ensure user installations of powerline work.
# TODO(andrei): This may be redundant!!
export PATH=~"/.local/bin:$PATH"

# The oh-my-zsh defaults are pretty tiny. Let's fix that!
export HISTSIZE=1000000
export SAVEHIST=1000000

# Fuck-powered autocorrect.
if which fuck >/dev/null 2>&1; then
  # Does not work on the guppies (should work once I set Anaconda to be enabled
  # by defaul).
  eval "$(thefuck --alias >/dev/null 2>&1)"
fi

# Set up linuxbrew if available
if [[ -d "$HOME/.linuxbrew" ]]; then
  export PATH="/home/andreib/.linuxbrew/bin:$PATH"
  export MANPATH="/home/andreib/.linuxbrew/share/man:$MANPATH"
  export INFOPATH="/home/andreib/.linuxbrew/share/info:$INFOPATH"
fi


muxcmd="tmux"
# Set 'NO_TMUX' to prevent zsh from spawning a tmux session. This can be useful
# if you want to quickly exec zsh without it kicking off tmux.
if [[ -n "$NO_TMUX" ]]; then
  # Everything locked and loaded. Attach to tmux if we haven't already.
  if which tmux >/dev/null 2>&1; then
    test -z ${TMUX} && eval "${muxcmd}"
  fi
fi

# The previous command "fails" if we're already inside tmux, but we don't
# want that to be shown as an ugly red error code when we're, e.g., reloading
# the config.
true
